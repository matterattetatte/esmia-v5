<!doctype html>
<html lang="{{ metadata.language }}">
	<head>
		<link rel="icon" type="image/png" href="/img/favicon.ico">
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>Esmia - {{ title or metadata.title }}</title>
		<meta name="description" content="{{ description or metadata.description }}">

		{#- Uncomment this if youâ€™d like folks to know that you used Eleventy to build your site!  #}
		{#- <meta name="generator" content="{{ eleventy.generator }}"> #}

		{#-
		Plain-text bundles are provided via the `eleventy-plugin-bundle` plugin:
		1. CSS:
			* Add to a per-page bundle using `{% css %}{% endcss %}`
			* Retrieve bundle content using `{% getBundle "css" %}` or `{% getBundleFileUrl "css" %}`
		2. Or for JavaScript:
			* Add to a per-page bundle using `{% js %}{% endjs %}`
			* Retrieve via `{% getBundle "js" %}` or `{% getBundleFileUrl "js" %}`
		3. Learn more: https://github.com/11ty/eleventy-plugin-bundle
		#}

		{#- Add CSS to the bundle #}
		<style>/* This is an arbitrary CSS string added to the bundle */</style>

		{#- Add the contents of a file to the bundle #}
		<style>{% include "css/index.css" %}</style>

		{#- Or you can add from node_modules #}
		{# <style>{% include "node_modules/something.css" %}</style> #}

		{#- Render the CSS bundle using inlined CSS (for the fastest site performance in production) #}
		<style>{% getBundle "css" %}</style>

		{#- Renders the CSS bundle using a separate file, if you can't set CSP directive style-src: 'unsafe-inline' #}
		{#- <link rel="stylesheet" href="{% getBundleFileUrl "css" %}"> #}

		{#- Add the heading-anchors web component to the JavaScript bundle #}
		<script type="module">{% include "node_modules/@zachleat/heading-anchors/heading-anchors.js" %}</script>
	</head>
	<body>
		<a href="#main" id="skip-link" class="visually-hidden">Skip to main content</a>

		<header class="flex">
			<a href="/" class="home-link">
              <img id="main-logo" src="" />
			</a>

			{#- Read more about `eleventy-navigation` at https://www.11ty.dev/docs/plugins/navigation/ #}
			<nav>
  <h2 class="visually-hidden">Top level navigation menu</h2>
  <ul class="nav">
    {%- for entry in collections.all | eleventyNavigation %}
      <li class="nav-item">	  
        <a href="{{ entry.url }}" 
		{% if entry.url == page.url %}aria-current="page"{% endif %}
		{% if page.url.includes(entry.url) %}aria-current="page"{% endif %}
		>
          {{ entry.title }}
        </a>
      </li>
    {%- endfor %}
  </ul>
  <button class="nav-toggle" aria-label="Toggle navigation">
    <span class="hamburger"></span>
  </button>
</nav>

		</header>

		<main id="main">
			<heading-anchors>
				{{ content | safe }}
			</heading-anchors>
		</main>

		<footer>
			<p>
				<em>Add some footer or somethign maybe?? <a href="https://www.11ty.dev/">{{ eleventy.generator }}</a></em>
			</p>
		</footer>

		<!-- This page `{{ page.url }}` was built on {% currentBuildDate %} -->
		<script type="module" src="{% getBundleFileUrl "js" %}"></script>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const navToggle = document.querySelector('.nav-toggle');
    const nav = document.querySelector('.nav');

    navToggle.addEventListener('click', function () {
      nav.classList.toggle('open');
    });
  });

   const navLinks = document.querySelectorAll('.nav-item a');

    function updateActiveNav() {
		
      const { pathname, hash } = window.location

      navLinks.forEach(link => {
        if (link.getAttribute('href').slice(1) === hash) {
          link.classList.add('active');
        } else {
          link.classList.remove('active');
        }
      });

  	  if (pathname === '/' && !hash) {
		navLinks[0].classList.add('active');
		return
	  }

    }

    updateActiveNav(); // initial highlight
    window.addEventListener('hashchange', updateActiveNav); // update on navigation

	document.getElementById('main-logo').src = "/img/main-logo.webp"


	window.addEventListener('scroll', function() {
		const navbar = document.querySelector('header');
		if (window.scrollY > 50) { // Adjust 50 to your preferred scroll threshold
		navbar.classList.add('scrolled');
		} else {
		navbar.classList.remove('scrolled');
		}
	});

	
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const sectionId = entry.target.id;
          if (sectionId) {
		    if (sectionId === "start") {
				window.history.replaceState(null, null, `/`);
			} else {
		   		window.history.replaceState(null, null, `#${sectionId}`);
			}
		  	updateActiveNav();
          }
        }
      });
    },
    {
      root: null, // Use viewport as root
      rootMargin: '0px', // No margin
      threshold: 0.5 // Trigger when 50% of the section is visible
    }
  );

 const sections = document.querySelectorAll('section');
  // Observe each section
  sections.forEach(section => {
    observer.observe(section);
  });
</script>

	</body>
</html>
